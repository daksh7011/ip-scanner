plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0  // bump for dogfood builds, public betas, etc.


android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "in.technowolf.ipscanner"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}" + (versionPatch == 0 ? "" : ".${versionPatch}")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
    }

    Properties properties = new Properties()
    def localPropertiesFile = project.rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        properties.load(localPropertiesFile.newInputStream())
    }

    buildFeatures {
        viewBinding true
    }

    signingConfigs {
        dev {
            storeFile file('dev-key.jks')
            storePassword System.getenv("keystorePassword") ?: properties.getProperty("keystorePassword")
            keyAlias 'ipscanner'
            keyPassword System.getenv("keystorePassword") ?: properties.getProperty("keystorePassword")
        }
        production {

        }
    }

    flavorDimensions "IpScanner"
    productFlavors {
        dev {
            dimension "IpScanner"
            versionNameSuffix '-dev'
            applicationIdSuffix ".dev"
            signingConfig signingConfigs.dev
        }
        production {
            dimension "IpScanner"
            versionNameSuffix '-prod'
            applicationIdSuffix ".prod"
            signingConfig signingConfigs.production
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    ktlint {
        debug = true
        verbose = true
        android = true
        outputToConsole = true
        outputColorName = "RED"
        ignoreFailures = false
        disabledRules = ["import-ordering", "indent"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'

    // Testing Libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0-alpha04'
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin'
    }

    // Jetpack Emoji library, Downloadable and bundled both.
    implementation 'androidx.emoji:emoji:1.1.0'
    implementation 'androidx.emoji:emoji-bundled:1.1.0'

    // Koin main features for Android (Scope,ViewModel ...)
    implementation 'io.insert-koin:koin-android:3.1.5'

    // Retrofit for network calls
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // Okhttp as http client in retrofit
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

    // Moshi to serialize and deserialize json response.
    implementation 'com.squareup.moshi:moshi-kotlin:1.13.0'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.13.0'

    // Converter for Moshi to work with retrofit
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'

    // Chucker to intercept network calls, Works with okhttp client.
    debugImplementation "com.github.chuckerteam.chucker:library:3.5.2"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:3.5.2"

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.4.1'

    // Ip validation view
    implementation 'com.gitlab.technowolf:ip-validation-view:1.1.5'

    // Room DB
    implementation "androidx.room:room-runtime:2.4.1"
    kapt "androidx.room:room-compiler:2.4.1"
    implementation "androidx.room:room-ktx:2.4.1"

    // Kotlin Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'

    // LeakCanary to detect memory leaks
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'

    // Firebase dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.2.8'
    implementation 'com.google.firebase:firebase-analytics-ktx:20.1.0'
    implementation 'com.google.firebase:firebase-perf-ktx:20.0.5'

}