image: ubuntu:22.04

stages:
  - lint
  - test
  - development
  - release

variables:
  ANDROID_COMPILE_SDK: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"
  EMULATOR_IMAGE: "24"
  SDK_TOOLS: "11076708" # from https://developer.android.com/studio/#command-tools

before_script:
  # install required packages
  - apt-get update --yes
  - apt-get install wget gnupg gnupg2 ca-certificates curl unzip --yes

  # install liberica jdk 17 https://bell-sw.com/libericajdk/
  - wget -q -O - https://download.bell-sw.com/pki/GPG-KEY-bellsoft | apt-key add -
  - echo "deb [arch=amd64] https://apt.bell-sw.com/ stable main" | tee /etc/apt/sources.list.d/bellsoft.list
  - apt-get --quiet update --yes
  - apt-get install bellsoft-java17-lite --yes
  - java -version

  # download and unzip android sdk
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${SDK_TOOLS}_latest.zip
  - echo A | unzip -q android-sdk.zip -d android-sdk-linux
  - rm android-sdk.zip

  # export gradle home path
  - export GRADLE_USER_HOME=$PWD/.gradle

  # export android sdk path
  - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux

  # export android sdk executables paths
  - export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/
  - export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools/
  - export PATH=$PATH:$ANDROID_SDK_ROOT/emulator/

  # hack with moving cmdline-tools to cmdline-tools/latest, no idea how to install directly
  - mkdir $ANDROID_SDK_ROOT/cmdline-tools/latest
  - mv $ANDROID_SDK_ROOT/cmdline-tools/{lib,bin,source.properties,NOTICE.txt} $ANDROID_SDK_ROOT/cmdline-tools/latest

  # update and install common android sdk components
  - sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --update
  - echo y | sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}"

  - chmod +x ./gradlew

# Define a global cache
cache:
  key: gradle-cache-key
  paths:
    - .gradle/wrapper
    - .gradle/caches

# Kotlin lint check
# Check linting
kotlinLint:
  interruptible: false
  stage: lint
  script:
    - ./gradlew ktlintCheck --continue

# Run tests
instrumented tests:
  interruptible: false
  stage: test
  script:
    # install packages needed by emulator
    - apt-get install libx11-dev libpulse0 libgl1 libnss3 libxcomposite-dev libxcursor1 libasound2 --yes

    # install android sdk components and emulator
    - sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "platform-tools" "emulator" "system-images;android-${EMULATOR_IMAGE};default;armeabi-v7a"

    # download script for emulator waiting
    - wget --quiet --output-document=android-wait-for-emulator https://raw.githubusercontent.com/travis-ci/travis-cookbooks/0f497eb71291b52a703143c5cd63a217c8766dc9/community-cookbooks/android-sdk/files/default/android-wait-for-emulator
    - chmod +x android-wait-for-emulator

    # create virtual device named "test"
    - echo no | avdmanager -v create avd -n test -k "system-images;android-${EMULATOR_IMAGE};default;armeabi-v7a"

    # start adb server
    - adb start-server

    # run emulator and tests
    - emulator -avd test -no-boot-anim -no-window -no-audio -no-snapshot &
    - ./android-wait-for-emulator
    - adb shell input keyevent 82

    - ./gradlew clean connectedCheck

# Assemble debug build for dev flavor
publishDevDebug:
  interruptible: true
  stage: development
  script:
    - ./gradlew assembleDevDebug
    - mv app/build/outputs/apk/dev/debug/app-dev-debug.apk ./
  artifacts:
    name: "IpScanner-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./app-dev-debug.apk
    expire_in: 1 day

# Run master branch assembly for dev release candidate.
publishDevRelease:
  interruptible: false
  stage: release
  script:
    - ./gradlew assembleDevRelease
    - mv app/build/outputs/apk/dev/release/app-dev-release.apk ./
  artifacts:
    name: "IpScanner-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
        - ./app-dev-release.apk
  only:
    - main